from flask import Flask, render_template, request, jsonify
import os
import json
from crossword_generator import CrosswordGenerator

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate', methods=['POST'])
def generate():
    try:
        data = request.get_json()
        size = int(data.get('size', 15))  # Default to 15x15
        language = data.get('language', 'fi')  # Default to Finnish
        
        # Load words
        words = []
        try:
            # Dictionary to store word hints
            word_hints = {}
            
            if language in ['fi', 'both']:
                # Use the new word file with more hints
                if os.path.exists('finnish_words_with_more_hints.txt'):
                    word_file = 'finnish_words_with_more_hints.txt'
                elif os.path.exists('finnish_words_with_hints.txt'):
                    word_file = 'finnish_words_with_hints.txt'
                else:
                    word_file = 'finnish_words.txt'
                print(f"Using word file: {word_file}")
                with open(word_file, 'r', encoding='utf-8') as f:
                    # Process each line in the word file
                    for line in f:
                        if line.strip() and not line.startswith('#'):
                            # Check if line contains a hint (format: word: hint)
                            if ':' in line:
                                parts = line.split(':', 1)  # Split only on first colon
                                word = parts[0].strip()
                                hint = parts[1].strip()
                                word_hints[word.lower()] = hint
                            else:
                                word = line.strip()
                                
                            # Basic validation: only include words with valid characters
                            valid_chars = set('abcdefghijklmnopqrstuvwxyzäö')
                            if all(c.lower() in valid_chars for c in word):
                                words.append(word)
                                
                # Also load hints from word_hints.json
                try:
                    with open('word_hints.json', 'r', encoding='utf-8') as f:
                        json_hints = json.load(f)
                        # Merge with hints from word file (word file hints take precedence)
                        for word, hint in json_hints.items():
                            if word.lower() not in word_hints:
                                word_hints[word.lower()] = hint
                    print(f"Loaded {len(json_hints)} hints from word_hints.json")
                    
                    # Print some sample hints from both sources
                    print("=== Sample hints from word file and JSON ===")
                    hint_count = 0
                    for word, hint in word_hints.items():
                        print(f"{word}: {hint}")
                        hint_count += 1
                        if hint_count >= 10:
                            break
                except Exception as e:
                    print(f"Error loading word_hints.json: {e}")
                print(f"Loaded {len(words)} Finnish words")
        except Exception as e:
            print(f"Error loading words: {e}")
            return jsonify({'error': 'Failed to load word list'}), 500

        if not words:
            return jsonify({'error': 'No words loaded'}), 500

        # Create generator with loaded words
        generator = CrosswordGenerator(size=size, language=language)
        generator.words = set(words)
        
        # Set the word hints in the generator
        generator.word_hints = word_hints
        
        # Debug word hints
        print(f"Word hints loaded: {len(generator.word_hints)}")
        if generator.word_hints:
            # Print a few examples
            sample_keys = list(generator.word_hints.keys())[:5]
            for key in sample_keys:
                print(f"Sample hint: {key} -> {generator.word_hints[key]}")
        else:
            print("No word hints loaded!")

        # Generate puzzle
        try:
            print(f"Starting puzzle generation with {len(generator.words)} words")
            try:
                grid, across, down, across_hints, down_hints, answer_key = generator.generate_puzzle()
                print(f"Grid dimensions: {len(grid)} x {len(grid[0]) if grid and len(grid) > 0 else 0}")
                
                # Debug output for hints
                print("\n=== Hints for placed words ===")
                print(f"Across hints: {len(across_hints)}")
                for i, hint in enumerate(across_hints[:5]):
                    print(f"Across {i+1}: {across[i]} - {hint}")
                    
                print(f"Down hints: {len(down_hints)}")
                for i, hint in enumerate(down_hints[:5]):
                    print(f"Down {i+1}: {down[i]} - {hint}")
                    
            except Exception as e:
                import traceback
                print(f"Error in generate_puzzle: {e}")
                traceback.print_exc()
                return jsonify({'error': f'Failed to generate puzzle: {str(e)}'}), 500
        except Exception as e:
            import traceback
            print(f"Error generating puzzle: {e}")
            traceback.print_exc()
            return jsonify({'error': str(e)}), 500
        # Ensure grid is properly serialized for JSON
        serialized_grid = []
        if grid and isinstance(grid, list):
            for row in grid:
                if isinstance(row, list):
                    serialized_row = []
                    for cell in row:
                        if isinstance(cell, dict):
                            serialized_row.append({
                                'letter': cell.get('letter', ' '),
                                'number': cell.get('number'),
                                'empty': cell.get('empty', False)
    except Exception as e:
        return jsonify({'error': str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True, port=5013)
